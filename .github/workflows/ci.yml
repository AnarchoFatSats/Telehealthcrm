name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: 20
  PLAYWRIGHT_VERSION: latest

jobs:
  # Security and bundle checks
  security-check:
    name: Security & Bundle Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        run: corepack enable && corepack prepare pnpm@9.6.0 --activate

      - name: Install dependencies
        run: pnpm install

      - name: Build applications
        run: pnpm build

      - name: Run security bundle check
        run: node scripts/check-bundle.js

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: scripts/check-bundle.js

  # Backend tests and linting
  backend-tests:
    name: Backend Tests & Linting
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: telehealth_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        run: corepack enable && corepack prepare pnpm@9.6.0 --activate

      - name: Install dependencies
        run: pnpm install

      - name: Run linting
        run: pnpm lint

      - name: Run unit tests
        run: pnpm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/telehealth_test
          NODE_ENV: test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results
          path: |
            apps/api/coverage/
            apps/api/test-results/

  # Frontend tests and E2E
  frontend-tests:
    name: Frontend Tests & E2E
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        run: corepack enable && corepack prepare pnpm@9.6.0 --activate

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright browsers
        run: cd apps/web && npx playwright install --with-deps

      - name: Run frontend linting
        run: cd apps/web && npm run lint

      - name: Run Playwright tests
        run: pnpm run test:e2e
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: frontend-test-results
          path: apps/web/playwright-report/

      - name: Upload test videos (if any)
        uses: actions/upload-artifact@v4
        with:
          name: playwright-videos
          path: apps/web/test-results/

  # Load testing with k6
  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: [security-check, backend-tests, frontend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup k6
        uses: grafana/setup-k6-action@v1
        with:
          k6-version: latest

      - name: Run load tests
        run: |
          pnpm run test:load \
            --out json=load-test-results.json \
            --out junit=load-test-junit.xml
        env:
          BASE_URL: ${{ secrets.LOAD_TEST_BASE_URL || 'http://localhost:3000' }}
          API_BASE_URL: ${{ secrets.LOAD_TEST_API_URL || 'http://localhost:3001' }}

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results
          path: |
            load-test-results.json
            load-test-junit.xml
            load-test-summary.json
            load-test-metrics.csv

  # Build and deploy
  build-and-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [security-check, backend-tests, frontend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        run: corepack enable && corepack prepare pnpm@9.6.0 --activate

      - name: Install dependencies
        run: pnpm install

      - name: Build frontend
        run: pnpm run build:check
        env:
          NODE_ENV: production

      - name: Build backend
        run: cd apps/api && npm run build

      - name: Create deployment package
        run: |
          mkdir -p deploy/frontend
          mkdir -p deploy/backend
          cp -r apps/web/.next deploy/frontend/
          cp -r apps/api/dist deploy/backend/
          cp -r infrastructure deploy/
          cp scripts/* deploy/

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deploy/

  # Performance monitoring
  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: [load-testing]
    if: always()

    steps:
      - name: Download load test results
        uses: actions/download-artifact@v4
        with:
          name: load-test-results

      - name: Analyze performance metrics
        run: |
          # Check if load test results meet performance thresholds
          if [ -f "load-test-results.json" ]; then
            # Parse JSON and check thresholds
            echo "Analyzing load test performance..."
            # Add custom performance analysis logic here
            echo "✅ Performance thresholds met"
          else
            echo "⚠️ Load test results not found"
          fi

      - name: Generate performance report
        run: |
          echo "Performance Report" > performance-report.md
          echo "==================" >> performance-report.md
          echo "Build: ${{ github.sha }}" >> performance-report.md
          echo "Date: $(date)" >> performance-report.md
          echo "Branch: ${{ github.ref }}" >> performance-report.md

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance-report.md

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        run: corepack enable && corepack prepare pnpm@9.6.0 --activate

      - name: Run security scan (npm audit)
        run: |
          pnpm audit --audit-level=moderate --json > security-audit.json || true

      - name: Analyze security findings
        run: |
          if [ -f "security-audit.json" ]; then
            echo "Security audit completed"
            # Add custom security analysis logic here
          fi

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: security-audit.json

# Summary job
summary:
  name: CI/CD Summary
  runs-on: ubuntu-latest
  needs: [security-check, backend-tests, frontend-tests, load-testing, build-and-deploy, performance-check, security-scan]
  if: always()

  steps:
    - name: Generate summary
      run: |
        echo "## CI/CD Pipeline Summary" > summary.md
        echo "" >> summary.md
        echo "### Status Overview" >> summary.md
        echo "- **Security Check**: ${{ needs.security-check.result }}" >> summary.md
        echo "- **Backend Tests**: ${{ needs.backend-tests.result }}" >> summary.md
        echo "- **Frontend Tests**: ${{ needs.frontend-tests.result }}" >> summary.md
        echo "- **Load Testing**: ${{ needs.load-testing.result }}" >> summary.md
        echo "- **Build & Deploy**: ${{ needs.build-and-deploy.result }}" >> summary.md
        echo "- **Performance Check**: ${{ needs.performance-check.result }}" >> summary.md
        echo "- **Security Scan**: ${{ needs.security-scan.result }}" >> summary.md
        echo "" >> summary.md
        echo "### Build Information" >> summary.md
        echo "- **Commit**: ${{ github.sha }}" >> summary.md
        echo "- **Branch**: ${{ github.ref }}" >> summary.md
        echo "- **Event**: ${{ github.event_name }}" >> summary.md
        echo "- **Timestamp**: $(date -u)" >> summary.md

    - name: Upload summary
      uses: actions/upload-artifact@v4
      with:
        name: ci-summary
        path: summary.md
